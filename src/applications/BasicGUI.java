/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package applications;

import interpreter.CommandInterpreter;
import interpreter.streameditor.StreamingTextArea;
import misc.MDIChild;

import javax.swing.*;
import javax.swing.event.InternalFrameListener;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.concurrent.*;

/**
 *
 * @author Administrator
 */
public class BasicGUI extends MDIChild implements Runnable, ActionListener, InternalFrameListener
{
    public FutureTask<?> basicTask;
    public long threadID;
    private CommandInterpreter commandInterpreter;

    /* sleep/wakeup map */
    transient public static final
        ConcurrentHashMap<Long, CountDownLatch> latchMap = new ConcurrentHashMap<>();
    transient public static final
        ConcurrentHashMap<Long, StreamingTextArea> streamMap = new ConcurrentHashMap<>();

    private static final ExecutorService executor = Executors.newCachedThreadPool(); //.newFixedThreadPool(10);
    private boolean cbDirectInsertFlag;

    {
        initComponents();
    }

    CompletableFuture<Long> _fut;

    /**
     * Creates new form NewJInternalFrame
     */
    public BasicGUI (CompletableFuture<Long> fut)
    {
        super();
        _fut = fut;
        basicTask = (FutureTask<?>) executor.submit(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        comboBox = new JComboBox<>();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        area = new StreamingTextArea();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        //setTitle("BASIC -- " + );
        setVisible(true);
        addInternalFrameListener(this);

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("CLS");
        jButton1.addActionListener(this);
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jButton2.setText("Stop");
        jButton2.addActionListener(this);
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, -1, -1));

        comboBox.addActionListener(this);
        jPanel1.add(comboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 0, -1, -1));

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        area.setBackground(new java.awt.Color(0, 0, 153));
        area.setForeground(new java.awt.Color(255, 255, 102));
        area.setColumns(20);
        area.setFont(new java.awt.Font("Monospaced", Font.PLAIN, 16)); // NOI18N
        area.setLineWrap(true);
        area.setRows(20);
        area.setCaretColor(new java.awt.Color(255, 102, 102));
        area.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(area);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }

    public synchronized void setLineInList (java.lang.String s)
    {
        SwingUtilities.invokeLater(() ->
        {
            if(((DefaultComboBoxModel<String>)comboBox.getModel()).getIndexOf(s) != -1)
            {
                return;  // item already in here
            }
            comboBox.insertItemAt (s, 0);
            cbDirectInsertFlag = true;
            comboBox.setSelectedIndex (0);
        });
    }

    public void actionPerformed(java.awt.event.ActionEvent evt)
    {
        if (evt.getSource() == jButton1)
        {
            BasicGUI.this.jButton1ActionPerformed(evt);
        }
        else if (evt.getSource() == jButton2)
        {
            BasicGUI.this.jButton2ActionPerformed(evt);
        }
        else if (evt.getSource () == comboBox)
        {
            if (cbDirectInsertFlag) // Not a real event
            {
                cbDirectInsertFlag = false;
            }
            else
            {
                String s = comboBox.getItemAt (comboBox.getSelectedIndex ());
                area.fakeIn (s+'\n');
            }
        }
    }

    public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
    {
    }

    public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
    {
        if (evt.getSource() == BasicGUI.this)
        {
            BasicGUI.this.formInternalFrameClosed(evt);
        }
    }

    public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
    {
    }

    public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
    {
    }

    public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
    {
    }

    public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
    {
    }

    public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
    {
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Window closed
     *
     * @param evt
     */
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameClosed
    {//GEN-HEADEREND:event_formInternalFrameClosed
        commandInterpreter.basicProgram.thread_running = false;  // Force basicThread to end if pg runs
        StreamingTextArea st = area;
        st.fakeIn("bye\n");  // Force basicThread to end if no pg runs
    }//GEN-LAST:event_formInternalFrameClosed

    // cls
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        area.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    // kill
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        // end possible wait state
        basicTask.cancel(true);
        commandInterpreter.basicProgram.basic_prg_running = false;
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public StreamingTextArea area; //javax.swing.JTextArea area;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private JComboBox <java.lang.String> comboBox;
    //private javax.swing.JTextField saveName;
    // End of variables declaration//GEN-END:variables

    /**
     * runs the command line interpreter
     * @return 1 if GUI closed. otherwise 0
     */
    private void runBasicSystem ()
    {
        System.err.println("run BASIC system ...");
        area.requestFocus();

        try
        {
            if (commandInterpreter == null)
            {
                System.err.println("before CI creation");
                commandInterpreter = new CommandInterpreter (this);
            }
            System.err.println("before ST creation");

            //StreamingTextArea st = area;
            streamMap.put (threadID, area);

            System.err.println("before interpreter start");

            commandInterpreter.prestart(area);

            if (_fut != null)
                _fut.complete(threadID);

            commandInterpreter.runCLI();
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }

    @Override
    public void run()
    {
        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
        System.out.println("Basic Thread start");
        threadID = Thread.currentThread().getId();
        SwingUtilities.invokeLater(() -> setTitle("BASIC Thread:" + threadID));

        runBasicSystem();

        commandInterpreter.dispose();
        latchMap.remove(threadID);
        streamMap.remove(threadID);
        //SwingUtilities.invokeLater (this::dispose);
        System.out.println("BasicThread end");
    }
}
